package templates

var Migrations = `package gen

import (
	"fmt"
	"net/url"
	"strings"

	"github.com/jinzhu/gorm"
	"gopkg.in/gormigrate.v1"
)

func Migrate(db *gorm.DB, options *gormigrate.Options, migrations []*gormigrate.Migration) error {
	m := gormigrate.New(db, options, migrations)

	// // it's possible to use this, but in case of any specific keys or columns are created in migrations, they will not be generated by automigrate
	// m.InitSchema(func(tx *gorm.DB) error {
	// 	return AutoMigrate(db)
	// })

	return m.Migrate();
}

func AutoMigrate(db *gorm.DB) error {
	_db := db.AutoMigrate({{range $obj := .Model.ObjectEntities}}
		{{.Name}}{},{{end}}
	)

	if(_db.Dialect().GetName() != "sqlite3"){
		{{range $obj := .Model.ObjectEntities}}
			{{range $rel := $obj.Relationships}}
				{{if $rel.IsToOne}}
					_db.Model({{$obj.Name}}{}).RemoveForeignKey("{{$rel.Name}}Id","{{$rel.ForeignKeyDestinationName}}")
					_db = _db.Model({{$obj.Name}}{}).AddForeignKey("{{$rel.Name}}Id","{{$rel.ForeignKeyDestinationName}}", "{{$rel.OnDelete "SET NULL"}}", "{{$rel.OnUpdate "SET NULL"}}")
				{{else if $rel.IsManyToMany}}
					_db.Model({{$rel.ManyToManyObjectName}}{}).RemoveForeignKey("{{$rel.ForeignKeyDestinationColumn}}","{{$rel.Obj.TableName}}(id)")
					_db = _db.Model({{$rel.ManyToManyObjectName}}{}).AddForeignKey("{{$rel.ForeignKeyDestinationColumn}}","{{$rel.Obj.TableName}}(id)", "{{$rel.OnDelete "CASCADE"}}", "{{$rel.OnUpdate "CASCADE"}}")
				{{end}}
			{{end}}
		{{end}}
	}
	return _db.Error
}
`
