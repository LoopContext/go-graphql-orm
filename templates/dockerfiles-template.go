package templates

// GitIgnore ignores files no git commands
var GitIgnore = `# MacOs hidden files
.DS_Store
# .env file
.env
# air's tmp folder
tmp/
# generated by graphql-orm
lambda.zip
test.db
`

// AirConf config for air, the reloader for dev
var AirConf = `# Working directory
# . or absolute path, please note that the directories following must be under root.
root = "."
tmp_dir = "tmp"

[build]
# Just plain old shell command. You could use "make" as well.
cmd = "go build -v -o ./tmp/graphql-server ."
# Binary file yields from "cmd".
bin = "tmp/graphql-server"
# Customize binary.
full_bin = "./tmp/graphql-server automigrate && ./tmp/graphql-server migrate && ./tmp/graphql-server start"
# Watch these filename extensions.
include_ext = ["go", "tpl", "tmpl", "html", ".dev"]
# Ignore these filename extensions or directories.
exclude_dir = ["assets", "tmp", "vendor", "frontend/node_modules"]
# Watch these directories if you specified.
include_dir = []
# Exclude files.
exclude_file = []
# This log file places in your tmp_dir.
log = "air.log"
# It's not necessary to trigger build each time file changes if it's too frequent.
delay = 1000 # ms
# Stop running old binary when build errors occur.
stop_on_error = true
# Send Interrupt signal before killing process (windows does not support this feature)
send_interrupt = true
# Delay after sending Interrupt signal
kill_delay = 100 # ms

[log]
# Show log time
time = true

[color]
# Customize each part's color. If no color found, use the raw app log.
main = "magenta"
watcher = "cyan"
build = "yellow"
runner = "green"

[misc]
# Delete tmp directory on exit
clean_on_exit = true
`

// DockerfileDev development dockerfile
var DockerfileDev = `FROM golang:alpine as base

RUN apk --update upgrade && apk add --no-cache bash git openssh curl build-base
# removing apk cache
RUN rm -rf /var/cache/apk/*

WORKDIR /graphql-server
COPY . /graphql-server/

RUN go get -v
RUN go get -v -u github.com/cosmtrek/air

CMD ["./scripts/run-dev.sh"]
`

// DockerfileProd production dockerfile
var DockerfileProd = `# Multistaged build production golang service
FROM golang:alpine as base

FROM base AS ci

# To add sqlite3 support, add build-base to the package list
RUN apk update && apk upgrade && apk add --no-cache git
RUN mkdir /build
ADD . /build/
WORKDIR /build

# Build prod
FROM ci AS build-env

RUN go mod download

# To add sqlite3 support, change to CGO_ENABLED=1
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix \
    cgo -ldflags '-extldflags "-static"' -o server .

FROM alpine AS prod
RUN apk --no-cache add ca-certificates

COPY --from=build-env build/server ./graphql-server/

# Set all the ENV variables here
CMD ["./graphql-server/server", "start"]
`

// Dockerfile ...
var Dockerfile = `# Multistaged build production golang service
FROM golang:alpine as base

FROM base AS ci

# To add sqlite3 support, add build-base to the package list
RUN apk update && apk upgrade && apk add --no-cache git
RUN mkdir /build
ADD . /build/
WORKDIR /build

# Build prod
FROM ci AS build-env

RUN go mod download

# To add sqlite3 support, change to CGO_ENABLED=1
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix \
    cgo -ldflags '-extldflags "-static"' -o server .

FROM alpine AS prod
RUN apk --no-cache add ca-certificates

COPY --from=build-env build/server ./graphql-server/

# Set all the ENV variables here
CMD ["./graphql-server/server", "start"]`

// RunDevSh ...
var RunDevSh = `#!/bin/sh
app="graphql-server"
printf "\nStart running: $app\n"
# Set all ENV vars for the server to run
# export $(grep -v '^#' .env | xargs)
time /$GOPATH/bin/air
# This should unset all the ENV vars, just in case.
# unset $(grep -v '^#' .env | sed -E 's/(.*)=.*/\1/''' | xargs)
printf "\nStopped running: $app\n\n"
`

// RunSh ...
var RunSh = `#!/bin/sh
buildPath="build"
app="./"
program="$buildPath/$app"
printf "\nStart app: $app\n"
# Set all ENV vars for the program to run
#export $(grep -v '^#' .env | xargs)
time make automigrate
time make migrate
time ./$program
# This should unset all the ENV vars, just in case.
#unset $(grep -v '^#' .env | sed -E 's/(.*)=.*/\1/' | xargs)
printf "\nStopped app: $app\n\n"
`

// DotenvExample example .env file
var DotenvExample = `PORT=8081
DEBUG=true
#DATABASE_URL=sqlite3://dev.db
DATABASE_URL=postgres://test:test@host.docker.internal:5432/test?sslmode=disable
EXPOSE_MIGRATION_ENDPOINT=true
EXPOSE_PLAYGROUND_ENDPOINT=true
TABLE_NAME_PREFIX=
EVENT_TRANSPORT_URL=
EVENT_TRANSPORT_SOURCE=
API_VERSION=/api/v1
`

// DockerComposeYml file
var DockerComposeYml = `version: "3.8"
services:
  dev:
    command: ./scripts/run-dev.sh
    build:
      context: .
      dockerfile: docker/dev.dockerfile
    env_file:
      - .env.dev
    ports:
      - 8081:8081
    volumes:
      - .:/graphql-server
  dev-linux:
    network_mode: "host"
    command: ./scripts/run-dev.sh
    build:
      context: .
      dockerfile: docker/dev.dockerfile
    env_file:
      - .env.dev
    ports:
      - 8081:8081
    volumes:
      - .:/graphql-server
  prod:
    build:
      context: .
      dockerfile: docker/prod.dockerfile
    ports:
      - 80:80
  docker:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 80:80
`
