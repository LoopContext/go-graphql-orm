extend type Query {
  hello: String!
  topCompanies: [Company!]!
}

type Company @key(fields: "id") {
  name: String

  countryId: ID
  country: Country

  employees: [User!]! @relationship(inverse: "employers")
  reviews: [Review!]!
}
extend type Company {
  uppercaseName: String!
}

type User {
  email: String
  firstName: String
  lastName: String

  employers: [Company!]! @relationship(inverse: "employees")
  tasks: [Task!]! @relationship(inverse: "assignee")
  createdTasks: [Task!]! @relationship(inverse: "owner")
}

enum TaskState {
  CREATED
  IN_PROGRESS
  RESOLVED
}
type Task {
  title: String
  completed: Boolean
  state: TaskState
  dueDate: Time

  assignee: User @relationship(inverse: "tasks")
  owner: User! @relationship(inverse: "createdTasks")
}

extend type Review @key(fields: "id") {
  id: ID! @external
  referenceID: ID! @external
  company: Company @requires(fields: "referenceID")
}

extend type Country @key(fields: "id") {
  id: ID! @external
}
