extend type Query {
  hello: String!
  topCompanies: [Company!]!
}

type Company @entity @key(fields: "id") {
  name: String @column

  countryId: ID @column
  country: Country

  employees: [User!]! @relationship(inverse: "employers")
  reviews: [Review!]!
}
extend type Company {
  uppercaseName: String!
}

type Address {
  street: String
  city: String
  zip: String
}

type User @entity {
  code: Int @column
  email: String @column
  firstName: String @column
  lastName: String @column
  addressRaw: String @column
  address: Address

  employers: [Company!]! @relationship(inverse: "employees", preload: true)
  tasks: [Task!]! @relationship(inverse: "assignee")
  createdTasks: [Task!]! @relationship(inverse: "owner")
}

enum TaskState {
  CREATED
  IN_PROGRESS
  RESOLVED
}
type Task @entity {
  title: String @column
  completed: Boolean @column
  state: TaskState @column
  dueDate: Time @column

  assignee: User @relationship(inverse: "tasks", preload: true)
  owner: User! @relationship(inverse: "createdTasks")
}

extend type Review @entity @key(fields: "id") {
  id: ID! @external
  referenceID: ID! @external
  company: Company @requires(fields: "referenceID")
}

extend type Country @entity @key(fields: "id") {
  id: ID! @external
}

type PlainEntity @entity {
  date: Time @column
  text: String @column(type: "text")
  shortText: String!
}
