package gen

import (
	"github.com/jinzhu/gorm"
	"github.com/rs/zerolog/log"
	"gopkg.in/gormigrate.v1"
)

// Migrate runs migrations
func Migrate(db *gorm.DB, options *gormigrate.Options, migrations []*gormigrate.Migration) error {
	m := gormigrate.New(db, options, migrations)

	// // it's possible to use this, but in case of any specific keys or columns are created in migrations, they will not be generated by automigrate
	// m.InitSchema(func(tx *gorm.DB) error {
	// 	return AutoMigrate(db)
	// })

	return m.Migrate()
}

func AutoMigrate(db *gorm.DB) (err error) {
	_db := db.AutoMigrate(
		Task{},
		TaskCategory{},
		Company{},
		User{},
		PlainEntity{},
	)
	if _db.Error != nil {
		log.Err(_db.Error).Send()
		return _db.Error
	}
	if _db.Dialect().GetName() != "sqlite3" {

		err = _db.Model(Task{}).RemoveForeignKey("assigneeId", TableName("users")+"(id)").Error
		if err != nil {
			return err
		}
		err = _db.Model(Task{}).AddForeignKey("assigneeId", TableName("users")+"(id)", "SET NULL", "SET NULL").Error
		if err != nil {
			return err
		}

		err = _db.Model(Task{}).RemoveForeignKey("ownerId", TableName("users")+"(id)").Error
		if err != nil {
			return err
		}
		err = _db.Model(Task{}).AddForeignKey("ownerId", TableName("users")+"(id)", "SET NULL", "SET NULL").Error
		if err != nil {
			return err
		}

		err = _db.Model(Task{}).RemoveForeignKey("parentTaskId", TableName("tasks")+"(id)").Error
		if err != nil {
			return err
		}
		err = _db.Model(Task{}).AddForeignKey("parentTaskId", TableName("tasks")+"(id)", "CASCADE", "SET NULL").Error
		if err != nil {
			return err
		}

		err = _db.Model(TaskCategoryTasks{}).RemoveForeignKey("taskId", TableName("tasks")+"(id)").Error
		if err != nil {
			return err
		}
		err = _db.Model(TaskCategoryTasks{}).AddForeignKey("taskId", TableName("tasks")+"(id)", "CASCADE", "CASCADE").Error
		if err != nil {
			return err
		}

		err = _db.Model(TaskCategoryTasks{}).RemoveForeignKey("categoryId", TableName("task_categories")+"(id)").Error
		if err != nil {
			return err
		}
		err = _db.Model(TaskCategoryTasks{}).AddForeignKey("categoryId", TableName("task_categories")+"(id)", "CASCADE", "CASCADE").Error
		if err != nil {
			return err
		}

		err = _db.Model(UserEmployers{}).RemoveForeignKey("employerId", TableName("companies")+"(id)").Error
		if err != nil {
			return err
		}
		err = _db.Model(UserEmployers{}).AddForeignKey("employerId", TableName("companies")+"(id)", "CASCADE", "CASCADE").Error
		if err != nil {
			return err
		}

		err = _db.Model(UserEmployers{}).RemoveForeignKey("employeeId", TableName("users")+"(id)").Error
		if err != nil {
			return err
		}
		err = _db.Model(UserEmployers{}).AddForeignKey("employeeId", TableName("users")+"(id)", "CASCADE", "CASCADE").Error
		if err != nil {
			return err
		}

		if _db.Error != nil {
			log.Err(_db.Error).Send()
		}
	}
	return nil // _db.Error
}
